# transfer to spatial dataset
mapdata_merged_sf <-st_as_sf(mapdata_merged)
output$descriptiontitle <- renderText({
paste0("")
})
output$datadescription <- renderText({
paste0("")
})
pal_fun_num <- colorBin("Blues", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
##################### add pop up for data description #############################
if (unique(mapdata_merged_sf$variables) == "Percent Voted"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value,"%")
}
else if (unique(mapdata_merged_sf$variables) == "Percent of householder living alone"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value,"%")
pal_fun_num <- colorBin("GnBu", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "Percent Insured Estimate"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value,"%")
pal_fun_num <- colorBin("Purples", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "Food insecurity rate"){
p_popup <- paste0("<strong> Location: </strong>",unique(mapdata_merged_sf$geo_name),"<br/>",
"<strong> Social Weather Index: </strong>",unique(mapdata_merged_sf$variables),"<br/>",
"<strong> Total estimate: </strong>", unique(mapdata_merged_sf$value),"%")
pal_fun_num <- colorBin("YlOrRd", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "Metro area cost-burdened households (%)"){
p_popup <- paste0("<strong> Metro Area: </strong>", mapdata_merged_sf$metro_area,"<br/>",
"<strong> Location: </strong>",unique(mapdata_merged_sf$geo_name),"<br/>",
"<strong> Social Weather Index: </strong>",unique(mapdata_merged_sf$variables),"<br/>",
"<strong> Total estimate: </strong>", unique(mapdata_merged_sf$value),"%")
output$descriptiontitle <- renderText({
paste0("Data Description")
})
output$datadescription <- renderText({
paste0("The data we use is Metro area cost-burdened households (%). County in the same metro area share the same data point")
})
pal_fun_num <- colorBin("PuBu", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "Total number of household with internet subscription"){
total_state = sum(as.numeric(mapdata_merged_sf$value))
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value,"(",round(as.numeric(mapdata_merged_sf$value)/total_state*100,2),"%)")
}
else if (unique(mapdata_merged_sf$variables) == "Children aged 3-4 enrolled in school (percent)"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value,"%")
}
else if (unique(mapdata_merged_sf$variables) == "Adjusted cohort graduation rate"){
total_state = sum(as.numeric(mapdata_merged_sf$value))
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value,"%")
output$descriptiontitle <- renderText({
paste0("Data Description")
})
output$datadescription <- renderText({
paste0("Adjusted cohort graduation rate is the number of students who graduate in four years or less with a  regular high school diploma divided by the number of students who form the adjusted-cohort.
The graduation rate shown on the map is calculated by taking the average of the graduation rates of all schools in each county.
Please check 'Map Data' page for details of graduation rate for each school.")
})
pal_fun_num <- colorBin("BuPu", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "National risk index score"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", round(as.numeric(mapdata_merged_sf$value),2))
output$descriptiontitle <- renderText({
paste0("Data Description")
})
output$datadescription <- renderText({
paste0("The National Risk Index (NRI) is an online tool to help illustrate the nation's communities most at risk of natural hazards.
It leverages authoritative nationwide datasets and multiplies values for exposure, hazard frequency, and historic loss ratios to derive
Expected Annual Loss for 18 natural hazards; and it combines this metric with Social Vulnerability and Community Resilience
data to generate a unitless, normalized Risk Index score for every census tract and county in the United States.","<br/>","<br/>",
"The NRI incorporates data for the following natural hazards: Avalanche, Coastal Flooding, Cold Wave, Drought, Earthquake, Hail, Heat Wave,
Hurricane, Ice Storm, Landslide, Lightning, Riverine Flooding, Strong Wind, Tornado, Tsunami, Volcanic Activity, Wildfire, and Winter Weather.")
})
pal_fun_num <- colorBin("YlOrRd", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "County-level real gdp"){
total_state = sum(as.numeric(mapdata_merged_sf$value))
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", as.numeric(mapdata_merged_sf$value),"(",round(as.numeric(mapdata_merged_sf$value)/total_state*100,2),"%)")
}
else if (unique(mapdata_merged_sf$variables) == "Gdp percent change from preceding period"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", as.numeric(mapdata_merged_sf$value),"%")
}
else if (unique(mapdata_merged_sf$variables) == "Hudper100"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>",round(as.numeric(mapdata_merged_sf$value),2))
output$descriptiontitle <- renderText({
paste0("Data Description")
})
output$datadescription <- renderText({
paste0("Hudper100 is HUD units per 100 ELI renters (=(HUD/Total)*100)")
})
}
else if (unique(mapdata_merged_sf$variables) == "Usdaper100"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>","USDAper100","<br/>",
"<strong> Total estimate: </strong>",round(as.numeric(mapdata_merged_sf$value),2),"<br/>",
"<strong> Data Description: </strong>","USDAper100 is USDA units per 100 ELI renters (=(USDA/Total)*100)")
output$descriptiontitle <- renderText({
paste0("Data Description")
})
output$datadescription <- renderText({
paste0("USDAper100 is USDA units per 100 ELI renters (=(USDA/Total)*100)")
})
}
else if (unique(mapdata_merged_sf$variables) == "Native Analysis Value"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value)
output$descriptiontitle <- renderText({
paste0("Data Description")
})
output$datadescription <- renderText({
paste0("The Native Analysis Value is emergency department visit rate per 1000 beneficiaries")
})
pal_fun_num <- colorBin("Purples", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "Jail Population Rate" | unique(mapdata_merged_sf$variables) == "Prison Population Rate"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value," per 100,000 residents age 15-64")
pal_fun_num <- colorBin("YlOrRd", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "Top-to-bottom ratio"){
p_popup <- paste0("<strong> Location: </strong>",mapdata_merged_sf$geo_name,"<br/>",
"<strong> Social Weather Index: </strong>",mapdata_merged_sf$variables,"<br/>",
"<strong> Total estimate: </strong>", mapdata_merged_sf$value)
output$descriptiontitle <- renderText({
paste0("Data Description")
})
output$datadescription <- renderText({
paste0("Ratio of top 1% income to bottom 99% income for all U.S. counties")
})
pal_fun_num <- colorBin("YlOrRd", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else{
p_popup <- paste0("<strong> Location: </strong>",unique(mapdata_merged_sf$geo_name),"<br/>",
"<strong> Social Weather Index: </strong>",unique(mapdata_merged_sf$variables),"<br/>",
"<strong> Total estimate </strong>", round(as.numeric(mapdata_merged_sf$value),2))
}
if (unique(mapdata_merged_sf$variables) == "Violent crimes per 100,000"){
pal_fun_num <- colorBin("YlOrRd", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
else if (unique(mapdata_merged_sf$variables) == "Median air quality"){
pal_fun_num <- colorBin("YlGn", domain =as.numeric(mapdata_merged_sf$value), bins = 7)
}
req(input$geo_level)
req(input$line_state)
if (input$line_state=="Washington"){
lng = -120.740135
lat = 47
}
else{
lng = -76.61
lat = 39.3
}
if(input$line_state =="Washington"){
if(input$geo_level == "State"){
zoom = 6
}
else if (input$geo_level == 'County' | input$geo_level == 'Tract'){
zoom = 7.5
}
else{
zoom=6.5
}
}
else if(input$line_state == "Maryland"){
if(input$geo_level == 'State'){
zoom=6.5
}
else if (input$geo_level == 'ZCTA'){
zoom = 7.5
}
else{
zoom = 8.5
}
}
leaflet(mapdata_merged_sf) %>%
addProviderTiles(provider = "CartoDB") %>%
addPolygons(
layerId = mapdata_merged_sf$geo_name,
color = "black",
weight = 1,
stroke = TRUE,
smoothFactor = 1,
fillOpacity = 0.55,
fillColor = ~pal_fun_num(as.numeric(value)), # set fill color with function from above and value
#popup = p_popup,
label = ~lapply(p_popup,HTML),
highlightOptions = highlightOptions(weight = 2,
color = "white",
fillOpacity = 0.7,
opacity =1,
bringToFront = T)) %>%
addLegend("bottomright",  # location
pal = pal_fun_num,     # palette function
values = ~as.numeric(value),
title = unique(mapdata_merged_sf$variables)) %>% # legend title
setView(lng = lng, lat = lat, zoom = zoom)
})
observeEvent(linelocation(), {
output$lineplot <- renderPlot({
lineloc<-linelocation()
geo_level_data <-geo_level()
if (unique(geo_level_data$variables) == "Adjusted cohort graduation rate"){
#print("lineloc_data after filter")
lineloc <- aggregate(as.numeric(lineloc$value), list(lineloc$year,lineloc$variables,lineloc$geo_name),FUN = mean)
names(lineloc)[1] <- 'year'
names(lineloc)[2] <- 'variables'
names(lineloc)[3] <- 'geo_name'
names(lineloc)[4] <- 'value'
geo_level_data <- aggregate(as.numeric(geo_level_data$value), list(geo_level_data$geo_level,geo_level_data$year,geo_level_data$geo_name), FUN=mean)
names(geo_level_data)[1] <- 'geo_level'
names(geo_level_data)[2] <- 'year'
names(geo_level_data)[3] <- 'geo_name'
names(geo_level_data)[4] <- 'value'
geo_level_data<-unique(geo_level_data)
}
US_values <- aggregate(as.numeric(geo_level_data$value), list(geo_level_data$year), FUN=mean)
names(US_values)[1] <- 'year'
names(US_values)[2] <- 'value'
plotdata = merge(lineloc[,c("year","variables","value")], US_values[,c("year","value")], by="year")
names(plotdata)[3] <- unique(lineloc$geo_name)
names(plotdata)[4] <- 'Average'
datamelted <- reshape2::melt(plotdata[,c("year", unique(lineloc$geo_name),"Average")], id.var='year')
ggplot(datamelted, aes(x=year, y=as.numeric(value), col=variable,group=variable)) + geom_line()+geom_point(size=2)+
ggtitle(paste0(unique(lineloc$variables), " trend line comparison"))
})
})
observeEvent(input$mymap_shape_click, {
req(input$year)
f_data <- year()
f_data$geo_id = substr(f_data$geo_id,3,nchar(f_data$geo_id))
names(f_data)[1] <- 'GEOID'
mapdata_merged <- dplyr::left_join(f_data,test[,c("GEOID","geometry")], "GEOID", "GEOID")
if (unique(mapdata_merged$dataset_id == 4)){
new_filtered <- aggregate(as.numeric(value) ~ GEOID, data = mapdata_merged, FUN = mean)
names(new_filtered)[1] <- 'GEOID'
names(new_filtered)[2] <- 'value'
new_merged <- dplyr::inner_join(new_filtered,test[,c("GEOID","geometry")], "GEOID","GEOID")
mapdata_merged_sf <- new_merged
}
# transfer to spatial dataset
mapdata_merged_sf <-st_as_sf(mapdata_merged)
#print("clicked map")
p <- input$mymap_shape_click
#print(p$id) # click on map, no response
if(!is.null(p$id)){
selectlevel=filter(mapdata_merged_sf,geo_name == p$id)$geo_level
updateSelectInput(session, "geo_level",choices = sort(unique(age()$geo_level),decreasing=TRUE),
selected = selectlevel)
if (grepl("Washington|WA",p$id)){
updateSelectInput(session, "line_state",choices = c("Washington","Maryland"),
selected = "Washington")
}
else
updateSelectInput(session, "line_state",choices = c("Washington","Maryland"),
selected = "Maryland")
updateSelectInput(session, "linelocation",choices = sort(unique(line_state()$geo_name)),
selected = p$id)
}
})
output$mapdatatitle <- renderText({
#print("mapdatatitle")
paste0(unique(linelocation()$geo_name)," Social Weather Map Data Table")
})
output$mytable = DT::renderDataTable({
#print("mapdatatable")
x <-linelocation()
names(x)[5] <- 'values'
names(x)[11] <- 'geo_names'
names(x)[12] <- 'geo_levels'
names(x)[13]<- "metro_areas"
names(social_index_dataset_copy)[17] <- 'variables1'
y <- dplyr::left_join(x,social_index_dataset_copy,by=c("dataset_id"="dataset_id","domain"="domain","subdomain"="subdomain",
"indicator"="indicator","variables"="variables1","year"="year","sex"="sex","race" ="race","age"="age",
"geo_id"="geo_id","NCESSCH" ="NCESSCH","SCHNAM"="SCHNAM","metro_areas"="metro_area"))
y<- y[,c("domain","subdomain","indicator","variables","sex","race","age","year","value","geo_name","NCESSCH","SCHNAM")]
datatable(y,
rownames = F,
extensions = 'Buttons',
options = list(paging = TRUE,
scrollX=TRUE,
ordering = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
pageLength=11,
lengthMenu=c(5,10,15)),
colnames=c("domain","subdomain","indicator","variables","sex","race","age","year","value","geo_name","NCESSCH","SCHNAM"))
})
#######################location profile view########################
output$text <- renderText({
#print("mapdatatable")
paste0(input$linelocation," Demographics")
})
racedata <- reactive({
filter(tbl_race_geo,geo_name == input$linelocation)
})
observeEvent(racedata(),{
#print("update race year slider")
#print(racedata())
choices = sort(unique(racedata()$year))
#print("choices")
#print(choices)
updateSliderInput(session,'yearperiod', value=range(choices),
min = min(as.numeric(choices)), max = max(as.numeric(choices)), step = 1)
})
yearperiod <- reactive({
#print("year changed")
#print(input$yearperiod)
filter(filter(racedata(), year == input$yearperiod),label != "estimate_total_population")
})
output$raceplot <- renderPlotly({
#print("raceplot")
racedataset <- yearperiod()
all_race = sum(as.numeric(racedataset$estimate))
# racedataset$fraction = as.numeric(racedataset$estimate)/sum(as.numeric(racedataset$estimate))
# racedataset = racedataset[order(racedataset$fraction), ]
# racedataset$ymax = cumsum(racedataset$fraction)
# racedataset$ymin = c(0, head(racedataset$ymax, n=-1))
color_r = c('rgb(253, 231, 37)','rgb(160, 218, 57)','rgb(74, 193, 109)',' rgb(31, 161, 135)','rgb(39, 127, 142)', 'rgb(54, 92, 141)', 'rgb(70, 50, 126)','rgb(68, 1, 84)')
fig <- racedataset %>% plot_ly(labels = ~ factor(label), values = ~as.numeric(estimate),
marker = list(colors = color_r,
line = list(color = '#FFFFFF', width = 1)))
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "Population by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
#raceplotly<-ggplot(racedataset, aes(fill = factor(label), ymax = ymax, ymin = ymin, xmax = 100, xmin = 80)) +
# geom_rect()+
#coord_polar(theta = "y")+
#xlim(c(20, 100)) +
#geom_label_repel(aes(label = paste(round(fraction*100,2),"%"), x = 100,y = (ymin + ymax)/2),inherit.aes = F, show.legend = F, size = 5)+
#theme(panel.background = element_rect(fill = "white"),
#panel.grid = element_blank(),
# axis.text = element_blank(),
#axis.title = element_blank(),
# axis.ticks = element_blank()) +
#scale_fill_viridis(discrete = TRUE)+
# labs(fill="Race",
# x=NULL,
# y=NULL,
# title="Ring Plot of Race")
# ggplotly(raceplotly)
})
############age
agedata <- reactive({
filter(tbl_age_geo,geo_name == input$linelocation)
})
observeEvent(agedata(),{
#print("update age year slider")
#print(agedata())
choices = sort(unique(agedata()$year))
#print("choices")
#print(choices)
updateSliderInput(session,'yearperiod2', value=range(choices),
min = min(as.numeric(choices)), max = max(as.numeric(choices)), step = 1)
})
yearperiod2 <- reactive({
#print("year changed")
#print(input$yearperiod2)
filter(agedata(), year == input$yearperiod2)
})
output$ageplot <- renderPlotly({
#print("ageplot")
agedataset <- yearperiod2()
all_age <- sum(as.numeric(agedataset$estimate))
agedataset$label <- factor(agedataset$label, levels = agedataset$label)
#print(agedataset)
color_a = c('rgb(253, 231, 37)', 'rgb(216, 226, 25)', 'rgb(176, 221, 47)','rgb(137, 213, 72)','rgb(101, 203, 94)','rgb(70, 192, 111)','rgb(46, 179, 124)', 'rgb(33, 165, 133)',
'rgb(31, 151, 139)', 'rgb(35, 137, 142)', 'rgb(41, 123, 142)','rgb(46, 109, 142)','rgb(53, 94, 141)', 'rgb(61, 78, 138)','rgb(67, 61, 132)', 'rgb(71, 42, 122)',
'rgb(72, 23, 105)','rgb(68, 1, 84)')
fig_a <- plot_ly(agedataset, x = ~as.numeric(estimate),y=agedataset$label, type = 'bar', orientation = 'h',
text = paste0(round(as.numeric(agedataset$estimate)/all_age*100,2),"%"), textposition = 'auto',
marker = list(color = color_a))
fig_a <- fig_a %>%
layout(title ="Population by Age Group",  showlegend = F,
xaxis = list(title = "Population",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE),
yaxis = list(title = "Age Group",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE))
fig_a
#ageplotly<-ggplot(agedataset, aes(x = label, y =as.numeric(estimate)))+
#coord_flip() +
#scale_fill_continuous(type = "viridis",name = "Number of People",labels = scales::comma)+theme(legend.position="right")+
#geom_bar(position="stack",stat="identity")+
#scale_y_continuous(labels = scales::comma) +
#xlab("Age Group") +
#ylab("Number of People")+
#ggtitle("Population by Age")+
#geom_col(position = 'dodge') +
#geom_text(
#  aes(label=paste0(percentage,"%"), group=1),
# position = position_dodge(width = .9),    # move to center of bars
#hjust = 0    # nudge above top of bar
#)+
#theme(panel.background = element_blank())
#ggplotly(ageplotly)
})
############pop
popdata <- reactive({
filter(tbl_pop_geo,geo_name == input$linelocation)
})
output$popplot <- renderPlotly({
#print("poplot")
popdataset <- popdata()
#print(popdataset)
color_p = c("rgb(253, 231, 37)"," rgb(181, 222, 43)", "rgb(110, 206, 88)", "rgb(53, 183, 121)","rgb(31, 158, 137)",' rgb(38, 130, 142)',
'rgb(49, 104, 142)', 'rgb(62, 73, 137)','rgb(72, 40, 120)', 'rgb(68, 1, 84)')
fig_p <- plot_ly(popdataset, x = ~year,y=popdataset$estimate, type = 'bar',
marker = list(color = color_p))
fig_p <- fig_p %>% layout(title = "Population by Year",  showlegend = F,
xaxis = list(type = 'category', title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE,tickmode = 'linear'),
yaxis = list(title = "Population",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE))
fig_p
#ggplot(popdataset, aes(x=as.factor(year), y = as.numeric(estimate),fill= as.numeric(estimate)))+
# geom_bar(stat="identity")+scale_fill_continuous(type = "viridis",name = "Number of People",labels = scales::comma)+
#scale_y_continuous(labels = scales::comma) +
#xlab("Year") +
#ylab("Number of People")+
#ggtitle("Bar Chart of Population")+
#theme(panel.background = element_blank())
})
############le
ledata <- reactive({
filter(tbl_le_geo,geo_name == input$linelocation)
})
observeEvent(ledata(),{
ledata<-ledata()
#print("ledata nrow")
##print(ledata)
output$leplot <- renderPlotly({
#print("poplot")
ledataset <- ledata()
#print(ledataset)
color_l = c("rgb(253, 231, 37)"," rgb(181, 222, 43)", "rgb(110, 206, 88)", "rgb(53, 183, 121)","rgb(31, 158, 137)",' rgb(38, 130, 142)',
'rgb(49, 104, 142)', 'rgb(62, 73, 137)','rgb(72, 40, 120)', 'rgb(68, 1, 84)')
fig_l <- plot_ly(ledataset, x = ~year,y=ledataset$estimate, type = 'bar',
marker = list(color = color_l))
fig_l <- fig_l  %>%
layout(title = "Life Expectancy by Year",  showlegend = F,
xaxis = list(type = 'category', title = "Year",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE,tickmode = 'linear'),
yaxis = list(title = "Population",showgrid = FALSE, zeroline = FALSE, showticklabels = TRUE))
#ggplot(ledataset, aes(x=year, y = as.numeric(estimate),fill= as.numeric(estimate)))+
# geom_bar(stat="identity")+scale_fill_continuous(type = "viridis",name = "Number of People",labels = scales::comma)+
#scale_y_continuous(labels = scales::comma) +
# xlab("Year") +
#ylab("Number of People")+
#ggtitle("Bar Chart of Life Expectancy")+
#theme(panel.background = element_blank())
})
})
##############profile data##################
output$demogeotext <- renderText({
paste0(input$linelocation," Demograhics Data Table")
})
selectdemo <- reactive({
req(input$selectdemo)
req(input$linelocation)
#print("select selected demo changed")
#print(input$selectdemo)
if (input$selectdemo=="Age"){
filter(tbl_age_geo,geo_name == input$linelocation)
}
else if (input$selectdemo=="Race"){
filter(tbl_race_geo,geo_name == input$linelocation)
}
else if (input$selectdemo=="Population"){
filter(tbl_pop_geo,geo_name == input$linelocation)
}
else{
filter(tbl_le_geo,geo_name == input$linelocation)
}
})
observeEvent(selectdemo(),{
#print("select demo")
#print(selectdemo())
output$profiledata = DT::renderDataTable({
datatable(selectdemo(),
rownames = F,
extensions = 'Buttons',
options = list(paging = TRUE,
scrollX=TRUE,
ordering = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
pageLength=19,
lengthMenu=c(5,10,15)))
})
})
}
})
shinyApp(body, server)
runApp('app_rsc_local.R')
