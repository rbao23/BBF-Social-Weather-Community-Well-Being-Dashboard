# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# load libaries
library(shiny)
library(shinythemes)
library(dplyr)
library(RPostgreSQL)
library(magrittr)
library(tidyverse)
library(leaflet)
library(tigris)
library(sf)
library(classInt)
library(RColorBrewer)
#library(shinydashboard)
################## Getting data from the database e#############################################
# script to connect
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/dbconnect.R")
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/pgpass.R")
# create a connection to the postgresql database
# note that "con" will be used later in each connection to the database
con <- connectdb(host = "bffsw.csde.washington.edu", dbname = "ruihab_sb")
# test
dbListTables(conn = con)
# get the required tables from the sql database
social_index_dataset = dbGetQuery(con, "SELECT * from public.tbl_social_weather_dataset
LEFT JOIN public.tbl_dataset_info using(dataset_id)
LEFT JOIN public.tbl_geography using(geo_id)")
# dataframe wrangling
social_index_dataset<-social_index_dataset %>% mutate(sex = case_when(startsWith(social_index_dataset$variable,"Female") ~ "Female",
startsWith(social_index_dataset$variable,"Male")   ~ "Male", TRUE ~ "All"))
social_index_dataset <- social_index_dataset %>%
mutate(age = case_when(
(social_index_dataset$dataset_id == 12 &(endsWith(social_index_dataset$variable, "years_percent insured estimate") | endsWith(social_index_dataset$variable,"older_percent insured estimate")))  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-25),TRUE ~ 'All'))
social_index_dataset <- social_index_dataset %>%
mutate(race = case_when(
(social_index_dataset$dataset_id == 8 & social_index_dataset$sex == 'All' & endsWith(social_index_dataset$variable,"prison_pop_rate"))  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-16),
(social_index_dataset$dataset_id == 8 & social_index_dataset$sex == 'All' & endsWith(social_index_dataset$variable,"jail_pop_rate"))  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-14),
(social_index_dataset$dataset_id == 11 & social_index_dataset$sex == 'All')  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-15),
(social_index_dataset$dataset_id == 12 & social_index_dataset$sex == 'All'& social_index_dataset$age == 'All')  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-25),
(social_index_dataset$dataset_id == 15 & social_index_dataset$sex == 'All')  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-14),TRUE ~ 'All'))
social_index_dataset$race[social_index_dataset$race=='Total']  <- "All"
social_index_dataset$race[social_index_dataset$race=='Aapi']  <- "Asian Americans and Pacific Islanders"
social_index_dataset$subdomain <- ifelse(is.na(social_index_dataset$subdomain), 'N/A', social_index_dataset$subdomain)
social_index_dataset$value[is.na(social_index_dataset$value)] <- 0
# disconnect database
dbDisconnect(con)
##############################shape file##############################
# get tract shapefile
wa_tracts <-tracts(state = "WA", county = c('King', 'Pierce','Yakima'))
md_tracts <-tracts(state = 'MD', county = c('Baltimore county', 'Baltimore city','Prince George','Montgomery'))
test_tracts = union(wa_tracts,md_tracts)
# get county shapefile
wa_counties <- counties(state = 'WA', cb = TRUE, resolution = '20m')
md_counties <- counties(state = 'MD', cb = TRUE, resolution = '20m')
test_counties <- union(wa_counties[,c("GEOID","geometry")],md_counties[,c("GEOID","geometry")])
#get state shapefile
allstates <- states(cb=TRUE)
test_area <- bind_rows(test_tracts,test_counties,allstates)
############################################### ui.R ##################################################
body<-navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
title = "Social Weather Community Well-Being Dashboard",
tabPanel("Comparion Map",h2("Select Dataset"),
sidebarLayout(
sidebarPanel(
selectInput("domain","Domain:",choices=sort(unique(social_index_dataset$domain))),
selectInput("subdomain", "Subdomain:", choices=NULL),
selectInput("indicator", "Indicator:", choices=NULL),
selectInput("sex", "Sex:",choices=NULL),
selectInput("race", "Race:",choices=NULL),
selectInput("age", "Age:",choices=NULL),
selectInput("year", "Year:",choices=NULL),
selectInput("geo_level", "Geographic Level:",choices=NULL)
),
mainPanel(
tabsetPanel(
tabPanel("US Map View", verbatimTextOutput("mapview"),
fluidRow(column(11, wellPanel(tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar{
background: #48C9B0;
border-top: 1px solid #48C9B0 ; border-bottom: 1px solid #48C9B0}")),
sliderInput("yearslider", "Select Mapping Year", value =1990, min = 1990, max=2021, step=1, animate=TRUE),
fluidRow(column(width = 12, div(id = "mymap", leaflet::leafletOutput("mymap", height = "50vh")))),
fluidRow(column(width = 12, " ", style='padding:3px;')),
fluidRow(column(width = 12, "Welcome to the Social Weather Map! Use the left panel to filter data,
and click on the map for additional details. Please note that data are not currently
available for every county in every year, and estimates will change as we process more data.",
style='font-family:Avenir, Helvetica;font-size:16;text-align:center')),
)))),
tabPanel("State Profile View", verbatimTextOutput("stateview")),
tabPanel("County Profile View", tableOutput("countyview"),
fluidRow(column(8, wellPanel(
tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar{
background: #48C9B0;
border-top: 1px solid #48C9B0 ; border-bottom: 1px solid #48C9B0}")),
sliderInput("countyview", "Select Mapping Year", value =2021, min = 1990, max=2021, step=1,animate=TRUE)
)))),
tabPanel("Tract Profile View", tableOutput("tractview"),
fluidRow(column(8, wellPanel(
tags$style(HTML(".js-irs-2 .irs-single, .js-irs-2 .irs-bar-edge, .js-irs-2 .irs-bar{
background: #48C9B0;
border-top: 1px solid #48C9B0 ; border-bottom: 1px solid #48C9B0}")),
sliderInput("tractview", "Select Mapping Year", value =2021, min = 1990, max=2021, step=1,animate=TRUE)
)))),
tabPanel("Zip Code Profile View", tableOutput("zctaview"),
fluidRow(column(8, wellPanel(
tags$style(HTML(".js-irs-3 .irs-single, .js-irs-3 .irs-bar-edge, .js-irs-3 .irs-bar{
background: #48C9B0;
border-top: 1px solid #48C9B0 ; border-bottom: 1px solid #48C9B0}")),
sliderInput("zctaview", "Select Mapping Year", value =2021, min = 1990, max=2021, step=1,animate=TRUE)
))))
)))),
tabPanel("About this site",h2("About Social Weather Index"))
)
############################################### server.R ##################################################
# Define server logic required to draw a histogram
server <- function(input,output,session) {
#reactive selectinput
domain <- reactive({
print("event domain")
req(input$domain)
filter(social_index_dataset, domain == input$domain)
})
observeEvent(domain(), {
print("event subdomain")
updateSelectInput(session,"subdomain", choices = sort(unique(domain()$subdomain)))
})
subdomain <- reactive({
req(input$subdomain)
filter(domain(), subdomain == input$subdomain)
})
observeEvent(subdomain(), {
print("event indicator")
updateSelectInput(session,inputId = "indicator", choices = sort(unique(subdomain()$indicator)))
})
indicator <- reactive({
req(input$indicator)
filter(subdomain(), indicator == input$indicator)
})
observeEvent(indicator(), {
print("event sex")
updateSelectInput(session,inputId = "sex", choices = sort(unique(indicator()$sex)))
})
sex <- reactive({
req(input$sex)
filter(indicator(), sex == input$sex)
})
observeEvent(sex(), {
print("event race")
updateSelectInput(session,inputId = "race", choices = sort(unique(sex()$race)))
})
race <- reactive({
req(input$race)
filter(sex(), race == input$race)
})
observeEvent(race(), {
print("event age")
updateSelectInput(session,inputId = "age", choices = sort(unique(race()$age)))
})
age <- reactive({
req(input$age)
filter(race(), age == input$age)
})
observeEvent(age(), {
print("event year")
updateSelectInput(session,inputId = "year", choices = sort(unique(age()$year)))
})
year <- reactive({
req(input$year)
filter(age(), year == input$year)
})
# reactive sliderinput
observeEvent(year(),{
print("event slider")
updateSliderInput(session, "yearslider", value = input$year,
min = min(age()$year), max = max(age()$year), step = 1)
})
observeEvent(year(), {
print("event geo_level")
updateSelectInput(session,inputId = "geo_level", choices = sort(unique(year()$geo_level)))
})
filtered_data <- reactive({
req(input$geo_level)
filter(year(), geo_level == input$geo_level)
})
observeEvent(filtered_data(),{
f_data <- filtered_data()
print(f_data)
f_data$geo_id <- substr(f_data$geo_id,3,nchar(f_data$geo_id))
names(f_data)[1] <- 'GEOID'
mapdata_merged <- dplyr::left_join(f_data,test_area[,c("GEOID","geometry")], "GEOID", "GEOID")%>% drop_na("geometry")
print(mapdata_merged)
# transfer to spatial dataset
mapdata_merged_sf <-st_as_sf(mapdata_merged)
pal_fun <- colorNumeric("YlOrRd", NULL, n =7)
p_popup <- paste0("<strong> Social Weather Index: </strong>",unique(mapdata_merged_sf$variable),"<br/>",
"<strong> Place: </strong>",unique(mapdata_merged_sf$geo_name),"<br/>",
"<strong> Total estimate </strong>", unique(mapdata_merged_sf$value))
if (mapdata_merged_sf$geo_level == "State"){
lng = 39.82
lat = -98.58
zoomview = 5
}
else{
lng = -119.5
lat = 47.2
zoomview = 6
}
#breaks_qt <- classIntervals(c(min(as.numeric(mapdata_merged_sf$value)), as.numeric(mapdata_merged_sf$value)), n = 7, style = "quantile")
output$mymap <- renderLeaflet({
leaflet(mapdata_merged_sf) %>%
addProviderTiles(provider = "CartoDB") %>%
addPolygons(
stroke = FALSE,
fillColor = ~pal_fun(as.numeric(value)), # set fill color with function from above and value
fillOpacity = 0.5,
smoothFactor = 0.2,
popup = p_popup) %>%
addLegend("bottomright",  # location
pal = pal_fun,     # palette function
values = ~as.numeric(value),
title = unique(mapdata_merged_sf$variable)) %>% # legend title
setView(lng = lng, lat = lat, zoom = zoomview)
})
})
}
shinyApp(body, server)
runApp('BBF-Social-Weather-Dashboard')
Q
shiny::runApp('BBF-Social-Weather-Dashboard')
runApp('BBF-Social-Weather-Dashboard')
setwd("~/BBF-Social-Weather-Dashboard")
# script to connect
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/dbconnect.R")
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/pgpass.R")
# create a connection to the postgresql database
# note that "con" will be used later in each connection to the database
con <- connectdb(host = "bffsw.csde.washington.edu", dbname = "ruihab_sb")
# test
dbListTables(conn = con)
#    http://shiny.rstudio.com/
#
# load libaries
setwd("~/BBF-Social-Weather-Dashboard")
library(shiny)
library(shinythemes)
library(dplyr)
library(RPostgreSQL)
library(magrittr)
library(tidyverse)
library(leaflet)
library(tigris)
options(tigris_use_cache = TRUE)
library(sf)
library(classInt)
library(RColorBrewer)
#library(shinydashboard)
################## Getting data from the database e#############################################
# script to connect
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/dbconnect.R")
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/pgpass.R")
# create a connection to the postgresql database
# note that "con" will be used later in each connection to the database
con <- connectdb(host = "bffsw.csde.washington.edu", dbname = "ruihab_sb")
# test
dbListTables(conn = con)
# get the required tables from the sql database
social_index_dataset = dbGetQuery(con, "SELECT * from public.tbl_social_weather_dataset
LEFT JOIN public.tbl_dataset_info using(dataset_id)
LEFT JOIN public.tbl_geography using(geo_id)")
# dataframe wrangling
social_index_dataset<-social_index_dataset %>% mutate(sex = case_when(startsWith(social_index_dataset$variable,"Female") ~ "Female",
startsWith(social_index_dataset$variable,"Male")   ~ "Male", TRUE ~ "All"))
# add age column
social_index_dataset <- social_index_dataset %>%
mutate(age = case_when(
(social_index_dataset$dataset_id == 12 &(endsWith(social_index_dataset$variable, "years_percent insured estimate") | endsWith(social_index_dataset$variable,"older_percent insured estimate")))  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-25),TRUE ~ 'All'))
# add race column
social_index_dataset <- social_index_dataset %>%
mutate(race = case_when(
(social_index_dataset$dataset_id == 8 & social_index_dataset$sex == 'All' & endsWith(social_index_dataset$variable,"prison_pop_rate"))  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-16),
(social_index_dataset$dataset_id == 8 & social_index_dataset$sex == 'All' & endsWith(social_index_dataset$variable,"jail_pop_rate"))  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-14),
(social_index_dataset$dataset_id == 11 & social_index_dataset$sex == 'All')  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-15),
(social_index_dataset$dataset_id == 12 & social_index_dataset$sex == 'All'& social_index_dataset$age == 'All')  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-25),
(social_index_dataset$dataset_id == 15 & social_index_dataset$sex == 'All')  ~ substr(social_index_dataset$variable, 1, nchar(social_index_dataset$variable)-14),TRUE ~ 'All'))
# change variable column
social_index_dataset <- social_index_dataset %>%
mutate(variable = case_when(
(social_index_dataset$dataset_id == 8 & endsWith(social_index_dataset$variable,"prison_pop_rate"))  ~ "Prison Population Rate",
(social_index_dataset$dataset_id == 8 & endsWith(social_index_dataset$variable,"jail_pop_rate"))  ~ "Jail Population Rate",
(social_index_dataset$dataset_id == 11)  ~  "Native Analysis Value",
(social_index_dataset$dataset_id == 12)  ~"Percent Insured Estimate",
(social_index_dataset$dataset_id == 15)  ~"Percent Voted",
TRUE ~social_index_dataset$variable))
social_index_dataset$race[social_index_dataset$race=='Total']  <- "All"
social_index_dataset$race[social_index_dataset$race=='Aapi']  <- "Asian Americans and Pacific Islanders"
social_index_dataset$subdomain <- ifelse(is.na(social_index_dataset$subdomain), 'N/A', social_index_dataset$subdomain)
social_index_dataset$value[is.na(social_index_dataset$value)] <- 'NA'
social_index_dataset <- social_index_dataset %>%
mutate(value = case_when(endsWith(social_index_dataset$value,"%") ~substr(social_index_dataset$value,0,nchar(social_index_dataset$value)-1),TRUE ~social_index_dataset$value))
# disconnect database
dbDisconnect(con)
# load libaries
library(shiny)
library(shinythemes)
library(dplyr)
library(RPostgreSQL)
library(magrittr)
library(tidyverse)
library(leaflet)
library(tigris)
options(tigris_use_cache = TRUE)
library(sf)
library(classInt)
library(RColorBrewer)
# script to connect
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/dbconnect.R")
source("H:/ruihab/Documents/BBF-Social-Weather-Dashboard/code_base/pgpass.R")
# create a connection to the postgresql database
# note that "con" will be used later in each connection to the database
con <- connectdb(host = "bffsw.csde.washington.edu", dbname = "ruihab_sb")
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
setwd("~/")
setwd("H:/ruihab/Documents/BBF-Social-Weather-Dashboard")
shiny::runApp()
runApp()
runApp('~/SocialWeatherDashboard_ruihab/test')
runApp('~/SocialWeatherDashboard_ruihab/test')
runApp('~/SocialWeatherDashboard_ruihab/test')
runApp('~/SocialWeatherDashboard_ruihab/test')
runApp('~/SocialWeatherDashboard_ruihab/test')
sessioninfo()
R --version
version
uninstall.R("4.1.2")
runApp()
shiny::runApp('H:/ruihab/Documents/BBF-Social-Weather-Dashboard')
shiny::runApp()
runApp()
library(shiny); runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
library(shiny); runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
install.packages("shinyWidgets")
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
install.packages("sp")
install.packages("sp")
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
runApp('app_rsc_local.R')
